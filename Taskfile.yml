# Notes
# - install task from: https://taskfile.dev/#/installation or use `setup-cpp --task true`
# - If using Visual Studio, either run the following commands inside the Visual Studio command prompt (vcvarsall) or set CMAKE_GENERATOR to "Visual Studio 17 2022"

version: 3

includes:
  docker: ./taskfiles/Docker.yml
  windows: ./taskfiles/Taskfile_windows.yml

tasks:
  configure:
    dir: "{{.PROJECT_DIR}}"
    cmds:
      - >
        cmake -S . -B build -G '{{.CMAKE_GENERATOR | default "Ninja Multi-Config"}}' -DCMAKE_BUILD_TYPE:STRING={{.CMAKE_BUILD_TYPE}} 
          -DFEATURE_TESTS:BOOL={{.FEATURE_TESTS | default "OFF"}} 
          -DFEATURE_FUZZ_TESTS:BOOL={{.FEATURE_FUZZ_TESTS | default "OFF"}} 
          -DFEATURE_CONSTEXPR_TESTS:BOOL={{.FEATURE_CONSTEXPR_TESTS | default "OFF"}}
          -DFEATURE_DOCS:BOOL={{.FEATURE_DOCS | default "OFF"}} 
          {{.CONFIGURE_FLAGS}}

  build:
    - task: configure
      vars:
        FEATURE_TESTS: OFF
        CMAKE_BUILD_TYPE: Release
        CONFIGURE_FLAGS: -DOPT_ENABLE_COVERAGE:BOOL=OFF -DENABLE_DEVELOPER_MODE:BOOL=OFF
    - task: build-template
      vars:
        CMAKE_BUILD_TYPE: Release

  build:debug:
    - task: configure
      vars:
        FEATURE_TESTS: OFF
        CMAKE_BUILD_TYPE: Debug
        CONFIGURE_FLAGS: -DOPT_ENABLE_COVERAGE:BOOL=OFF -DENABLE_DEVELOPER_MODE:BOOL=OFF
    - task: build-template
      vars:
        CMAKE_BUILD_TYPE: Debug

  build:release:
    - task: configure
      vars:
        FEATURE_TESTS: OFF
        CMAKE_BUILD_TYPE: Release
        CONFIGURE_FLAGS: -DOPT_ENABLE_COVERAGE:BOOL=OFF -DENABLE_DEVELOPER_MODE:BOOL=OFF -DDISABLE_SANITIZER:BOOL=ON
    - task: build-template
      vars:
        CMAKE_BUILD_TYPE: Release

  build:cross:mingw:
    - task: configure
      vars:
        FEATURE_TESTS: OFF
        CMAKE_BUILD_TYPE: Release
        CONFIGURE_FLAGS: -DOPT_ENABLE_COVERAGE:BOOL=OFF -DENABLE_DEVELOPER_MODE:BOOL=OFF -DDISABLE_SANITIZER:BOOL=ON -DENABLE_CROSS_COMPILING:BOOL=ON -DDEFAULT_TRIPLET=x64-mingw-dynamic
    - task: build-template
      vars:
        CMAKE_BUILD_TYPE: Release

  install:
    - cmake --install build --prefix {{.INSTALL_PREFIX | default "./install"}}
    - cd build && cpack -C Release -G {{.CPACK_GENERATOR | default "ZIP"}}

  test:
    - task: configure
      vars:
        FEATURE_TESTS: ON
        CMAKE_BUILD_TYPE: Debug
        CONFIGURE_FLAGS: -DOPT_ENABLE_COVERAGE:BOOL=OFF -DENABLE_DEVELOPER_MODE:BOOL=ON
    - task: build-template
      vars:
        CMAKE_BUILD_TYPE: Debug
    - task: test-template

  test:relwithdebinfo:
    - task: configure
      vars:
        FEATURE_TESTS: ON
        CMAKE_BUILD_TYPE: RelWithDebInfo
        CONFIGURE_FLAGS: -DOPT_ENABLE_COVERAGE:BOOL=OFF -DENABLE_DEVELOPER_MODE:BOOL=ON
    - task: build-template
      vars:
        CMAKE_BUILD_TYPE: RelWithDebInfo
    - task: test-template

  test:release:
    - task: configure
      vars:
        FEATURE_TESTS: ON
        CMAKE_BUILD_TYPE: Release
        CONFIGURE_FLAGS: -DOPT_ENABLE_COVERAGE:BOOL=OFF -DENABLE_DEVELOPER_MODE:BOOL=ON
    - task: build-template
      vars:
        CMAKE_BUILD_TYPE: Release
    - task: test-template

  coverage:
    - task: configure
      vars:
        FEATURE_TESTS: ON
        CMAKE_BUILD_TYPE: Debug
        CONFIGURE_FLAGS: -DOPT_ENABLE_COVERAGE:BOOL=ON -DENABLE_DEVELOPER_MODE:BOOL=ON
    - task: build-template
      vars:
        CMAKE_BUILD_TYPE: Debug
    - task: test-template
      vars:
        CMAKE_BUILD_TYPE: Debug
    - task: coverage-template

  test:without-sanitizer:
    - task: configure
      vars:
        FEATURE_TESTS: ON
        CMAKE_BUILD_TYPE: Debug
        CONFIGURE_FLAGS: -DOPT_ENABLE_COVERAGE:BOOL=OFF -DENABLE_DEVELOPER_MODE:BOOL=ON -DDISABLE_SANITIZER:BOOL=ON
    - task: build-template
      vars:
        CMAKE_BUILD_TYPE: Debug
    - task: test-template

  test:relwithdebinfo:without-sanitizer:
    - task: configure
      vars:
        FEATURE_TESTS: ON
        CMAKE_BUILD_TYPE: RelWithDebInfo
        CONFIGURE_FLAGS: -DOPT_ENABLE_COVERAGE:BOOL=OFF -DENABLE_DEVELOPER_MODE:BOOL=ON -DDISABLE_SANITIZER:BOOL=ON
    - task: build-template
      vars:
        CMAKE_BUILD_TYPE: RelWithDebInfo
    - task: test-template

  test:release:without-sanitizer:
    - task: configure
      vars:
        FEATURE_TESTS: ON
        CMAKE_BUILD_TYPE: Release
        CONFIGURE_FLAGS: -DOPT_ENABLE_COVERAGE:BOOL=OFF -DENABLE_DEVELOPER_MODE:BOOL=ON -DDISABLE_SANITIZER:BOOL=ON
    - task: build-template
      vars:
        CMAKE_BUILD_TYPE: Release
    - task: test-template

  docs:
    - task: build-template
      vars:
        CMAKE_BUILD_TYPE: Debug
        FEATURE_DOCS: ON
        BUILD_FLAGS: --target doxygen-docs

  # The templates called in the other tasks. The variables can be set using the `vars` parameter or by environment variables. To create global variables that are passed to the internally called templates, use `env`
  # This template accepts the generator, build type and feature flags defined by the vars. Other flags can be passed by `CONFIGURE_FLAGS` and `BUILD_FLAGS`. For example, a specific target can be built by setting BUILD_FLAGS to "--target <NAME>"
  build-template:
    dir: "{{.PROJECT_DIR}}"
    internal: true
    cmds:
      - cmake --build build --config {{.CMAKE_BUILD_TYPE}} {{.BUILD_FLAGS}}

  # Execute the app or the tests
  test-template:
    dir: "{{.PROJECT_DIR}}"
    internal: true
    cmds:
      - cd build/src/my_exe/test && ctest -C {{.CMAKE_BUILD_TYPE}} --output-on-failure
      - cd build/src/my_header_lib/test && ctest -C {{.CMAKE_BUILD_TYPE}} --output-on-failure
      - cd build/src/my_lib/test && ctest -C {{.CMAKE_BUILD_TYPE}} --output-on-failure

  # Run with coverage analysis
  coverage-template:
    dir: "{{.PROJECT_DIR}}"
    internal: true
    cmds:
      # Set --sources "your_source_folder\*" and --filter "your_source_folder/" to have a clean coverage report
      - mkdir -p ./build/coverage/
      - gcovr -j {{.nproc | default 1}} --delete --filter "src/my_exe/" --filter "src/my_lib/" --filter "src/my_header_lib/" --root ./ --print-summary --html-details ./build/coverage/index.html --xml-pretty --xml ./build/coverage.xml ./build
      - echo "Open ./build/coverage/index.html in a browser for a visual coverage report"
    env:
      CMAKE_BUILD_TYPE: "{{.CMAKE_BUILD_TYPE}}"

  lint:
    - git ls-files --exclude-standard | grep -E '\.(cpp|hpp|c|cc|cxx|hxx|ixx)$' | xargs clang-format -i -style=file
    - git ls-files --exclude-standard | grep -E '(CMakeLists\.txt)|(\.(cmake))$' | xargs cmake-format --in-place | xargs cmake-lint --disabled-codes C0103 C0301 R0912 R0915 R0913 --suppress-decorations
    - ~/vcpkg/vcpkg format-manifest ./vcpkg.json
    - npx -y cspell lint --no-progress --show-suggestions

  clean:
    - rm -rf ./build ./install
